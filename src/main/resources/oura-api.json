{
  "openapi": "3.0.2",
  "info": {
    "title": "Oura API",
    "description": "# Overview \n\nThe Oura API allows Oura users and partner applications to improve their user experience with Oura data.\n\nThis document describes the Oura API Version 2 (V2), which supports access to the latest Oura Ring data types.\n For access to other data types—which have not yet migrated to V2—refer to the [Oura API Version 1 (V1)](https://cloud.ouraring.com/docs/) documentation.\n\n# Data Access\n\nIndividual Oura users can access their own data through the API by using a [Personal Access Token](https://cloud.ouraring.com/personal-access-tokens).\n\nIf you want to retrieve data for multiple users, a registered [API Application](https://cloud.ouraring.com/oauth/applications) is required.\n API Applications are limited to **10** users before requiring approval from Oura. There is no limit once an application is approved.\n Additionally, Oura users **must provide consent** to share each data type an API Application has access to.\n\nAll data access requests through the Oura API require [Authentication](https://cloud.ouraring.com/docs/authentication).\n\nAdditionally, we recommend that Oura users keep their mobile app updated to support API access for the latest data types.\n The Oura API V2 returns a 426 response code for users who do not have an updated version of the app installed.\n\n# Authentication\n\nThe Oura API provides two methods for Authentication: (1) the OAuth2 protocol and (2) Personal Access Tokens. For more information on the OAuth2 flow, see our [Authentication instructions](https://cloud.ouraring.com/docs/authentication).\n\nAccess tokens must be included in the request header as follows:\n```http\nGET /v2/usercollection/personal_info HTTP/1.1\nHost: api.ouraring.com\nAuthorization: Bearer <token>\n```\n\n# Oura HTTP Response Codes\n\n| Response Code                        | Description |\n| ------------------------------------ | - |\n| 200 OK                               | Successful Response         |\n| 400 Query Parameter Validation Error | The request contains query parameters that are invalid or incorrectly formatted. |\n| 426 Minimum App Version Error        | The Oura user's mobile app does not meet the minimum app version requirement to support sharing the requested data type. The Oura user must update their mobile app to enable API access for the requested data type. |\n| 429 Request Rate Limit Exceeded        | The API is rate limited to 5000 requests in a 5 minute period. You will receive a 429 error code if you exceed this limit. [Contact us](mailto:api-support@ouraring.com) if you expect your usage to exceed this limit.| ",
    "termsOfService": "https://cloud.ouraring.com/legal/api-agreement",
    "version": "2.0",
    "x-logo": {
      "url": "/v2/static/images/Oura_Logo-Developer_RBG_Black.svg"
    }
  },
  "paths": {
    "/v2/usercollection/daily_activity": {
      "get": {
        "tags": ["Daily Activity"],
        "summary": "Get Daily Activity",
        "description": "Returns Oura Daily Activity data for the specified Oura user within a given timeframe",
        "operationId": "daily_activity_route_daily_activity_get",
        "parameters": [
          {
            "required": false,
            "schema": {
              "title": "Start Date",
              "type": "string",
              "format": "date",
              "description": "```YYYY-MM-DD``` formatted start date [default: ```end_date``` - 1 day]"
            },
            "name": "start_date",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "title": "End Date",
              "type": "string",
              "format": "date",
              "description": "```YYYY-MM-DD``` formatted end date [default: current UTC date]"
            },
            "name": "end_date",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "title": "Next Token",
              "type": "string",
              "description": "Pagination token"
            },
            "name": "next_token",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DailyActivityResponse"
                },
                "examples": {
                  "example": {
                    "summary": "example",
                    "value": {
                      "data": [
                        {
                          "class_5_min": "000000000000000000000000000000000000000000000000000000000000000000000000003444544444445545455443454554454443334333322330000000000232232222222232222222322223222000000022332233422333222232233333222222222222222332223212233222122221111111111111121111111111111111111111111111111111111111111111",
                          "score": 82,
                          "active_calories": 1222,
                          "average_met_minutes": 1.90625,
                          "contributors": {
                            "meet_daily_targets": 43,
                            "move_every_hour": 100,
                            "recovery_time": 100,
                            "stay_active": 98,
                            "training_frequency": 71,
                            "training_volume": 98
                          },
                          "equivalent_walking_distance": 20122,
                          "high_activity_met_minutes": 444,
                          "high_activity_time": 3000,
                          "inactivity_alerts": 0,
                          "low_activity_met_minutes": 117,
                          "low_activity_time": 10020,
                          "medium_activity_met_minutes": 391,
                          "medium_activity_time": 6060,
                          "met": {
                            "interval": 60.0,
                            "items": [
                              0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1,
                              0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1,
                              0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1,
                              0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1,
                              0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1,
                              0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1,
                              0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1,
                              0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1,
                              0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1,
                              0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1,
                              0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1,
                              0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1,
                              0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1,
                              0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1,
                              0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1,
                              0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1,
                              0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1,
                              0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1,
                              0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1,
                              0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1,
                              0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1,
                              0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1,
                              0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1,
                              0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1,
                              0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1,
                              0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1,
                              0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1,
                              0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1,
                              0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1,
                              0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1,
                              0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1,
                              0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1,
                              0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1,
                              0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1,
                              0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1,
                              0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1,
                              0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 2.0,
                              1.9, 1.4, 1.3, 1.3, 2.8, 3.5, 3.4, 3.8, 5.3, 5.4,
                              3.4, 1.5, 2.7, 9.1, 4.1, 5.3, 4.8, 5.8, 3.5, 5.6,
                              5.7, 5.4, 5.6, 12.1, 9.3, 5.7, 5.6, 3.5, 5.3, 5.1,
                              5.1, 5.0, 5.4, 5.4, 5.9, 5.4, 5.0, 5.4, 5.0, 5.0,
                              7.4, 5.8, 4.5, 2.7, 1.3, 5.8, 6.4, 3.4, 7.7, 3.9,
                              3.1, 3.9, 9.0, 4.7, 4.8, 5.7, 6.1, 4.4, 5.6, 7.4,
                              6.7, 11.4, 14.6, 14.0, 4.0, 1.7, 4.4, 7.0, 15.0,
                              11.7, 5.4, 3.0, 4.8, 4.8, 5.0, 7.9, 13.8, 8.9,
                              6.3, 2.2, 5.1, 8.6, 4.4, 7.6, 7.7, 7.0, 11.5, 8.3,
                              12.0, 14.2, 8.9, 5.1, 5.4, 5.0, 11.9, 9.7, 5.1,
                              5.0, 4.8, 6.3, 5.0, 5.0, 5.3, 7.8, 3.9, 1.4, 2.0,
                              1.6, 2.9, 4.8, 5.1, 3.8, 1.9, 9.8, 11.4, 14.6,
                              14.8, 12.4, 9.8, 13.6, 9.8, 9.8, 9.8, 9.8, 9.8,
                              9.8, 15.2, 13.4, 13.4, 10.5, 9.8, 13.0, 14.4, 4.6,
                              2.0, 5.6, 4.8, 5.6, 8.2, 9.5, 5.4, 5.9, 6.7, 3.8,
                              6.3, 6.2, 10.9, 7.9, 3.6, 10.3, 10.1, 8.3, 8.3,
                              4.3, 2.6, 2.5, 4.1, 2.4, 6.3, 3.6, 7.0, 8.8, 5.4,
                              6.2, 5.8, 3.2, 1.7, 1.9, 1.9, 1.4, 1.9, 1.5, 1.9,
                              1.9, 1.6, 1.7, 1.9, 1.9, 1.8, 2.8, 6.8, 4.5, 3.2,
                              1.8, 2.1, 1.9, 1.9, 1.7, 1.9, 1.7, 1.6, 1.5, 1.7,
                              2.0, 1.7, 1.9, 3.8, 3.9, 2.3, 3.3, 5.1, 1.9, 1.7,
                              1.6, 1.6, 1.5, 1.7, 1.9, 1.7, 1.5, 1.7, 2.0, 1.7,
                              1.2, 1.4, 2.2, 3.2, 2.4, 1.2, 1.1, 1.2, 1.4, 1.7,
                              3.8, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1,
                              0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1,
                              0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1,
                              0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1,
                              0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1,
                              0.1, 0.1, 0.1, 0.1, 1.3, 1.6, 1.6, 1.8, 1.9, 1.5,
                              1.4, 1.7, 1.7, 1.8, 1.5, 1.5, 1.7, 1.5, 1.8, 1.5,
                              1.5, 1.5, 2.7, 3.4, 1.5, 1.7, 1.4, 1.4, 1.5, 1.5,
                              1.6, 1.4, 1.7, 1.6, 1.5, 1.5, 1.4, 1.5, 1.5, 1.5,
                              1.5, 1.6, 1.5, 1.5, 1.5, 1.5, 1.4, 1.5, 1.5, 1.7,
                              1.5, 1.5, 1.5, 1.6, 1.5, 1.3, 1.6, 1.5, 1.5, 1.4,
                              1.4, 1.4, 1.5, 1.5, 1.5, 1.4, 1.4, 1.5, 1.5, 2.3,
                              2.3, 1.8, 1.5, 1.5, 1.6, 1.5, 1.5, 1.6, 1.5, 1.6,
                              1.4, 1.4, 1.5, 1.7, 1.4, 1.4, 1.3, 1.3, 1.3, 1.3,
                              1.5, 1.4, 1.4, 1.4, 1.4, 1.7, 1.5, 1.6, 1.8, 1.6,
                              1.4, 1.4, 1.6, 1.4, 1.8, 1.4, 1.7, 1.5, 1.5, 1.5,
                              2.2, 2.3, 2.4, 1.5, 1.3, 1.4, 1.5, 1.4, 1.4, 1.4,
                              1.6, 1.5, 1.4, 1.4, 1.4, 2.2, 1.7, 1.4, 1.5, 1.4,
                              1.5, 1.5, 1.5, 1.7, 1.8, 1.9, 1.6, 1.4, 1.8, 1.2,
                              1.6, 1.2, 1.2, 2.0, 1.4, 1.2, 1.5, 1.5, 1.3, 1.3,
                              0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1,
                              0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1,
                              0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1,
                              0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 2.0, 1.8, 1.6, 1.6,
                              1.7, 1.3, 1.6, 1.3, 1.3, 1.5, 1.3, 1.5, 2.3, 2.7,
                              3.0, 2.9, 4.0, 2.2, 1.9, 1.9, 1.3, 1.3, 1.5, 1.4,
                              1.4, 1.3, 1.2, 1.4, 1.7, 1.3, 1.6, 1.3, 1.8, 2.1,
                              1.3, 1.7, 1.6, 1.1, 1.4, 1.3, 1.3, 4.6, 5.3, 1.5,
                              1.3, 1.3, 1.4, 1.7, 1.4, 1.8, 1.7, 1.4, 1.4, 1.3,
                              1.6, 1.9, 1.8, 1.9, 6.2, 3.4, 1.9, 1.9, 3.0, 1.9,
                              1.7, 3.4, 1.9, 2.1, 2.9, 1.3, 1.1, 1.6, 1.6, 1.5,
                              1.4, 1.3, 1.9, 1.3, 1.4, 1.5, 1.6, 1.7, 2.3, 1.7,
                              1.5, 1.5, 1.3, 1.2, 1.3, 1.2, 1.4, 1.4, 1.4, 1.7,
                              1.9, 1.9, 1.3, 1.7, 1.7, 1.5, 1.5, 1.9, 1.5, 1.3,
                              1.4, 1.5, 1.4, 1.5, 1.3, 1.6, 3.1, 1.6, 1.8, 1.4,
                              1.9, 4.3, 2.9, 1.9, 1.3, 1.7, 1.5, 1.9, 1.4, 1.9,
                              3.2, 2.3, 1.9, 1.7, 1.7, 1.9, 1.5, 1.3, 1.5, 1.5,
                              1.5, 1.4, 1.9, 1.5, 1.4, 1.4, 1.3, 1.5, 1.6, 1.4,
                              1.5, 1.6, 1.6, 1.5, 1.5, 1.3, 1.5, 1.5, 1.7, 1.7,
                              1.5, 1.3, 1.5, 1.3, 1.4, 1.3, 1.5, 1.4, 1.5, 1.5,
                              1.5, 1.7, 1.7, 1.7, 1.3, 1.3, 1.4, 1.4, 1.4, 1.5,
                              1.4, 1.5, 1.4, 1.3, 1.3, 1.5, 1.2, 1.4, 1.6, 1.3,
                              1.4, 1.3, 1.3, 1.4, 1.5, 1.9, 1.3, 1.3, 1.3, 1.3,
                              1.4, 1.3, 1.3, 1.5, 1.7, 1.3, 1.5, 1.4, 1.4, 1.5,
                              1.6, 1.4, 1.4, 1.6, 2.3, 2.7, 4.8, 1.9, 2.7, 1.8,
                              1.7, 1.4, 1.4, 1.3, 1.2, 1.2, 1.3, 1.2, 1.6, 1.2,
                              1.2, 1.2, 1.2, 1.2, 1.2, 1.2, 1.2, 1.2, 1.3, 1.9,
                              4.4, 1.7, 1.4, 1.2, 1.3, 1.2, 1.2, 1.2, 1.1, 0.9,
                              1.0, 0.9, 1.0, 0.9, 1.3, 1.1, 0.9, 0.9, 1.3, 1.3,
                              1.0, 0.9, 1.0, 1.3, 1.7, 3.5, 2.9, 1.4, 2.1, 4.1,
                              2.7, 1.1, 1.2, 1.2, 1.2, 1.2, 1.2, 1.2, 1.2, 1.2,
                              1.2, 1.1, 0.9, 1.1, 0.9, 1.6, 1.2, 1.0, 0.9, 1.0,
                              1.2, 0.9, 0.9, 1.1, 1.1, 1.2, 1.0, 1.2, 0.9, 0.9,
                              0.9, 1.1, 1.8, 1.2, 1.3, 1.4, 1.4, 1.2, 1.2, 1.2,
                              1.2, 1.0, 0.9, 0.9, 0.9, 0.9, 1.6, 0.9, 0.9, 0.9,
                              1.0, 1.0, 0.9, 0.9, 0.9, 0.9, 0.9, 0.9, 0.9, 0.9,
                              0.9, 0.9, 0.9, 0.9, 0.9, 0.9, 0.9, 0.9, 1.1, 1.3,
                              1.0, 0.9, 0.9, 0.9, 0.9, 0.9, 0.9, 0.9, 0.9, 0.9,
                              0.9, 0.9, 0.9, 0.9, 0.9, 0.9, 0.9, 0.9, 0.9, 0.9,
                              0.9, 0.9, 0.9, 0.9, 0.9, 0.9, 0.9, 1.2, 0.9, 0.9,
                              0.9, 0.9, 0.9, 0.9, 0.9, 0.9, 0.9, 0.9, 0.9, 0.9,
                              0.9, 0.9, 1.1, 0.9, 0.9, 1.0, 1.3, 1.3, 0.9, 0.9,
                              0.9, 0.9, 0.9, 0.9, 0.9, 0.9, 0.9, 0.9, 0.9, 0.9,
                              0.9, 0.9, 0.9, 0.9, 0.9, 0.9, 0.9, 0.9, 0.9, 0.9,
                              0.9, 0.9, 0.9, 0.9, 0.9, 0.9, 0.9, 0.9, 0.9, 0.9,
                              0.9, 0.9, 0.9, 0.9, 0.9, 0.9, 0.9, 0.9, 0.9, 0.9,
                              0.9, 0.9, 0.9, 0.9, 0.9, 0.9, 0.9, 1.1, 1.1, 1.1,
                              0.9, 0.9, 0.9, 0.9, 0.9, 0.9, 0.9, 0.9, 0.9, 0.9,
                              0.9, 0.9, 0.9, 0.9, 0.9, 0.9, 0.9, 0.9, 0.9, 0.9,
                              0.9, 0.9, 0.9, 0.9, 0.9, 0.9, 0.9, 0.9, 0.9, 0.9,
                              0.9, 1.1, 1.0, 0.9, 0.9, 0.9, 0.9, 0.9, 0.9, 0.9,
                              0.9, 1.1, 0.9, 0.9, 0.9, 0.9, 0.9, 0.9, 0.9, 0.9,
                              0.9, 0.9, 0.9, 1.3, 0.9, 0.9, 0.9, 0.9, 0.9, 0.9,
                              0.9, 1.0, 0.9, 0.9, 0.9, 1.2, 0.9, 0.9, 0.9, 0.9,
                              0.9, 0.9, 0.9, 0.9, 1.1, 0.9, 0.9, 0.9, 0.9, 0.9,
                              0.9, 0.9, 0.9, 1.1, 0.9, 1.0, 1.1, 1.2, 0.9, 0.9,
                              0.9, 0.9, 0.9, 0.9, 0.9, 0.9, 0.9, 0.9, 1.1, 0.9,
                              0.9, 1.1, 0.9, 0.9, 0.9, 0.9, 1.0, 0.9, 0.9, 1.0,
                              0.9, 0.9, 0.9, 0.9, 0.9, 0.9, 0.9, 0.9, 0.9, 0.9,
                              0.9, 1.1, 0.9, 0.9, 0.9, 0.9, 0.9, 0.9, 0.9, 0.9,
                              0.9, 1.1, 0.9, 0.9, 0.9, 0.9, 0.9, 0.9, 0.9, 0.9,
                              0.9, 0.9, 0.9, 0.9, 0.9, 0.9, 0.9, 0.9, 0.9, 0.9,
                              0.9, 0.9, 0.9, 0.9, 0.9, 0.9, 0.9, 0.9, 0.9, 0.9,
                              0.9, 0.9, 0.9, 0.9, 0.9, 0.9, 0.9, 0.9, 0.9, 0.9,
                              0.9, 0.9, 0.9, 0.9, 0.9, 0.9, 0.9
                            ],
                            "timestamp": "2021-11-26T04:00:00.000-08:00"
                          },
                          "meters_to_target": -16200,
                          "non_wear_time": 27480,
                          "resting_time": 18840,
                          "sedentary_met_minutes": 10,
                          "sedentary_time": 21000,
                          "steps": 18430,
                          "target_calories": 350,
                          "target_meters": 7000,
                          "total_calories": 3446,
                          "day": "2021-11-26",
                          "timestamp": "2021-11-26T04:00:00-08:00"
                        }
                      ],
                      "next_token": null
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Query Parameter Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "example": {
                    "summary": "example",
                    "value": {
                      "detail": "Start time is greater than end time: [start_time: 2021-10-01 01:02:03+00:00; end_date: 2021-01-01 01:02:03+00:00"
                    }
                  }
                }
              }
            }
          },
          "426": {
            "description": "Minimum App Version Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "example": {
                    "summary": "example",
                    "value": {
                      "detail": "The user associated with this token has not updated their mobile app to support this data type."
                    }
                  }
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "label": "cURL",
            "source": "curl --location --request GET 'https://api.ouraring.com/v2/usercollection/daily_activity?start_date=2021-11-01&end_date=2021-12-01' \\\n--header 'Authorization: Bearer <token>'"
          },
          {
            "lang": "Python",
            "source": "import requests \nurl = 'https://api.ouraring.com/v2/usercollection/daily_activity' \nparams={ \n    'start_date': '2021-11-01', \n    'end_date': '2021-12-01' \n}\nheaders = { \n  'Authorization': 'Bearer <token>' \n}\nresponse = requests.request('GET', url, headers=headers, params=params) \nprint(response.text)",
            "label": "Python"
          },
          {
            "lang": "JavaScript",
            "source": "var myHeaders = new Headers(); \nmyHeaders.append('Authorization', 'Bearer <token>'); \nvar requestOptions = { \n  method: 'GET', \n  headers: myHeaders, \nfetch('https://api.ouraring.com/v2/usercollection/daily_activity?start_date=2021-11-01&end_date=2021-12-01', requestOptions) \n  .then(response => response.text()) \n  .then(result => console.log(result)) \n  .catch(error => console.log('error', error));",
            "label": "JavaScript"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient().newBuilder() \n  .build(); \nRequest request = new Request.Builder() \n  .url(\"https://api.ouraring.com/v2/usercollection/daily_activity?start_date=2021-11-01&end_date=2021-12-01\") \n  .method(\"GET\", null) \n  .addHeader(\"Authorization\", \"Bearer <token>\") \n  .build(); \nResponse response = client.newCall(request).execute();",
            "label": "Java"
          }
        ]
      }
    },
    "/v2/usercollection/heartrate": {
      "get": {
        "tags": ["Heart Rate"],
        "summary": "Get Heart Rate",
        "description": "Returns available heart rate data for a specified Oura user within a given timeframe",
        "operationId": "heartrate_route_heartrate_get",
        "parameters": [
          {
            "required": false,
            "schema": {
              "title": "Start Datetime",
              "type": "string",
              "format": "datetime",
              "description": "ISO 8601 formatted start timestamp [default: ```end_datetime``` - 1 day]"
            },
            "name": "start_datetime",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "title": "End Datetime",
              "type": "string",
              "format": "datetime",
              "description": "ISO 8601 formatted end timestamp [default: current UTC timestamp]"
            },
            "name": "end_datetime",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "title": "Next Token",
              "type": "string",
              "description": "Pagination token"
            },
            "name": "next_token",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HeartRateResponse"
                },
                "examples": {
                  "example": {
                    "summary": "example",
                    "value": {
                      "data": [
                        {
                          "bpm": 60,
                          "source": "sleep",
                          "timestamp": "2021-01-01T01:02:03+00:00"
                        }
                      ],
                      "next_token": null
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Query Parameter Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "example": {
                    "summary": "example",
                    "value": {
                      "detail": "Start time is greater than end time: [start_time: 2021-10-01 01:02:03+00:00; end_date: 2021-01-01 01:02:03+00:00"
                    }
                  }
                }
              }
            }
          },
          "426": {
            "description": "Minimum App Version Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "example": {
                    "summary": "example",
                    "value": {
                      "detail": "The user associated with this token has not updated their mobile app to support this data type."
                    }
                  }
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "label": "cURL",
            "source": "# The '+' symbol in the timezone must be escaped to `%2B` if included. \ncurl --location --request GET 'https://api.ouraring.com/v2/usercollection/heartrate?start_datetime=2021-11-01T00:00:00-08:00&end_datetime=2021-12-01T00:00:00-08:00' \\ \n--header 'Authorization: Bearer <token>'"
          },
          {
            "lang": "Python",
            "source": "import requests \nurl = 'https://api.ouraring.com/v2/usercollection/heartrate' \nparams={ \n    'start_datetime': '2021-11-01T00:00:00-08:00', \n    'end_datetime': '2021-12-01T00:00:00-08:00' \n}\nheaders = { \n  'Authorization': 'Bearer <token>' \n}\nresponse = requests.request('GET', url, headers=headers, params=params) \nprint(response.text)",
            "label": "Python"
          },
          {
            "lang": "JavaScript",
            "source": "var myHeaders = new Headers(); \nmyHeaders.append('Authorization', 'Bearer <token>'); \nvar requestOptions = { \n  method: 'GET', \n  headers: myHeaders, \nfetch('https://api.ouraring.com/v2/usercollection/heartrate?start_datetime=2021-11-01T00:00:00-08:00&end_datetime=2021-12-01T00:00:00-08:00', requestOptions) \n  .then(response => response.text()) \n  .then(result => console.log(result)) \n  .catch(error => console.log('error', error));",
            "label": "JavaScript"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient().newBuilder() \n  .build(); \nRequest request = new Request.Builder() \n  .url(\"https://api.ouraring.com/v2/usercollection/heartrate?start_datetime=2021-11-01T00:00:00-08:00&end_datetime=2021-12-01T00:00:00-08:00\") \n  .method(\"GET\", null) \n  .addHeader(\"Authorization\", \"Bearer <token>\") \n  .build(); \nResponse response = client.newCall(request).execute();",
            "label": "Java"
          }
        ]
      }
    },
    "/v2/usercollection/personal_info": {
      "get": {
        "tags": ["Personal Info"],
        "summary": "Get Personal Info",
        "description": "Returns personal info data for the specified Oura user.",
        "operationId": "personal_info_route_get",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PersonalInfoResponse"
                },
                "examples": {
                  "example": {
                    "summary": "example",
                    "value": {
                      "age": 31,
                      "weight": 74.8,
                      "height": 1.8,
                      "biological_sex": "male",
                      "email": "example@example.com"
                    }
                  }
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "label": "cURL",
            "source": "curl --location --request GET 'https://api.ouraring.com/v2/usercollection/personal_info?start_date=2021-11-01&end_date=2021-12-01' \\\n--header 'Authorization: Bearer <token>'"
          },
          {
            "lang": "Python",
            "source": "import requests \nurl = 'https://api.ouraring.com/v2/usercollection/personal_info' \nparams={ \n    'start_date': '2021-11-01', \n    'end_date': '2021-12-01' \n}\nheaders = { \n  'Authorization': 'Bearer <token>' \n}\nresponse = requests.request('GET', url, headers=headers, params=params) \nprint(response.text)",
            "label": "Python"
          },
          {
            "lang": "JavaScript",
            "source": "var myHeaders = new Headers(); \nmyHeaders.append('Authorization', 'Bearer <token>'); \nvar requestOptions = { \n  method: 'GET', \n  headers: myHeaders, \nfetch('https://api.ouraring.com/v2/usercollection/personal_info?start_date=2021-11-01&end_date=2021-12-01', requestOptions) \n  .then(response => response.text()) \n  .then(result => console.log(result)) \n  .catch(error => console.log('error', error));",
            "label": "JavaScript"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient().newBuilder() \n  .build(); \nRequest request = new Request.Builder() \n  .url(\"https://api.ouraring.com/v2/usercollection/personal_info?start_date=2021-11-01&end_date=2021-12-01\") \n  .method(\"GET\", null) \n  .addHeader(\"Authorization\", \"Bearer <token>\") \n  .build(); \nResponse response = client.newCall(request).execute();",
            "label": "Java"
          }
        ]
      }
    },
    "/v2/usercollection/session": {
      "get": {
        "tags": ["Sessions"],
        "summary": "Get Sessions",
        "description": "Returns available Oura session data for the specified Oura user within a given timeframe",
        "operationId": "sessions_route_session_get",
        "parameters": [
          {
            "required": false,
            "schema": {
              "title": "Start Date",
              "type": "string",
              "format": "date",
              "description": "```YYYY-MM-DD``` formatted start date [default: ```end_date``` - 1 day]"
            },
            "name": "start_date",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "title": "End Date",
              "type": "string",
              "format": "date",
              "description": "```YYYY-MM-DD``` formatted end date [default: current UTC date]"
            },
            "name": "end_date",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "title": "Next Token",
              "type": "string",
              "description": "Pagination token"
            },
            "name": "next_token",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SessionResponse"
                },
                "examples": {
                  "example": {
                    "summary": "example",
                    "value": {
                      "data": [
                        {
                          "day": "2021-11-12",
                          "start_datetime": "2021-11-12T12:32:09-08:00",
                          "end_datetime": "2021-11-12T12:40:49-08:00",
                          "type": "rest",
                          "heart_rate": null,
                          "heart_rate_variability": null,
                          "mood": null,
                          "motion_count": {
                            "interval": 5.0,
                            "items": [0.0],
                            "timestamp": "2021-11-12T12:32:09.000-08:00"
                          }
                        }
                      ],
                      "next_token": null
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Query Parameter Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "example": {
                    "summary": "example",
                    "value": {
                      "detail": "Start time is greater than end time: [start_time: 2021-10-01 01:02:03+00:00; end_date: 2021-01-01 01:02:03+00:00"
                    }
                  }
                }
              }
            }
          },
          "426": {
            "description": "Minimum App Version Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "example": {
                    "summary": "example",
                    "value": {
                      "detail": "The user associated with this token has not updated their mobile app to support this data type."
                    }
                  }
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "label": "cURL",
            "source": "curl --location --request GET 'https://api.ouraring.com/v2/usercollection/session?start_date=2021-11-01&end_date=2021-12-01' \\\n--header 'Authorization: Bearer <token>'"
          },
          {
            "lang": "Python",
            "source": "import requests \nurl = 'https://api.ouraring.com/v2/usercollection/session' \nparams={ \n    'start_date': '2021-11-01', \n    'end_date': '2021-12-01' \n}\nheaders = { \n  'Authorization': 'Bearer <token>' \n}\nresponse = requests.request('GET', url, headers=headers, params=params) \nprint(response.text)",
            "label": "Python"
          },
          {
            "lang": "JavaScript",
            "source": "var myHeaders = new Headers(); \nmyHeaders.append('Authorization', 'Bearer <token>'); \nvar requestOptions = { \n  method: 'GET', \n  headers: myHeaders, \nfetch('https://api.ouraring.com/v2/usercollection/session?start_date=2021-11-01&end_date=2021-12-01', requestOptions) \n  .then(response => response.text()) \n  .then(result => console.log(result)) \n  .catch(error => console.log('error', error));",
            "label": "JavaScript"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient().newBuilder() \n  .build(); \nRequest request = new Request.Builder() \n  .url(\"https://api.ouraring.com/v2/usercollection/session?start_date=2021-11-01&end_date=2021-12-01\") \n  .method(\"GET\", null) \n  .addHeader(\"Authorization\", \"Bearer <token>\") \n  .build(); \nResponse response = client.newCall(request).execute();",
            "label": "Java"
          }
        ]
      }
    },
    "/v2/usercollection/tag": {
      "get": {
        "tags": ["Tags"],
        "summary": "Get Tags",
        "description": "Returns Oura tags data for the specified Oura user within a given timeframe",
        "operationId": "tags_route_tag_get",
        "parameters": [
          {
            "required": false,
            "schema": {
              "title": "Start Date",
              "type": "string",
              "format": "date",
              "description": "```YYYY-MM-DD``` formatted start date [default: ```end_date``` - 1 day]"
            },
            "name": "start_date",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "title": "End Date",
              "type": "string",
              "format": "date",
              "description": "```YYYY-MM-DD``` formatted end date [default: current UTC date]"
            },
            "name": "end_date",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "title": "Next Token",
              "type": "string",
              "description": "Pagination token"
            },
            "name": "next_token",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TagResponse"
                },
                "examples": {
                  "example": {
                    "summary": "example",
                    "value": {
                      "data": [
                        {
                          "day": "2021-01-01",
                          "text": "Need coffee",
                          "timestamp": "2021-01-01T01:02:03-08:00",
                          "tags": ["tag_generic_nocaffeine"]
                        }
                      ],
                      "next_token": null
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Query Parameter Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "example": {
                    "summary": "example",
                    "value": {
                      "detail": "Start time is greater than end time: [start_time: 2021-10-01 01:02:03+00:00; end_date: 2021-01-01 01:02:03+00:00"
                    }
                  }
                }
              }
            }
          },
          "426": {
            "description": "Minimum App Version Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "example": {
                    "summary": "example",
                    "value": {
                      "detail": "The user associated with this token has not updated their mobile app to support this data type."
                    }
                  }
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "label": "cURL",
            "source": "curl --location --request GET 'https://api.ouraring.com/v2/usercollection/tag?start_date=2021-11-01&end_date=2021-12-01' \\\n--header 'Authorization: Bearer <token>'"
          },
          {
            "lang": "Python",
            "source": "import requests \nurl = 'https://api.ouraring.com/v2/usercollection/tag' \nparams={ \n    'start_date': '2021-11-01', \n    'end_date': '2021-12-01' \n}\nheaders = { \n  'Authorization': 'Bearer <token>' \n}\nresponse = requests.request('GET', url, headers=headers, params=params) \nprint(response.text)",
            "label": "Python"
          },
          {
            "lang": "JavaScript",
            "source": "var myHeaders = new Headers(); \nmyHeaders.append('Authorization', 'Bearer <token>'); \nvar requestOptions = { \n  method: 'GET', \n  headers: myHeaders, \nfetch('https://api.ouraring.com/v2/usercollection/tag?start_date=2021-11-01&end_date=2021-12-01', requestOptions) \n  .then(response => response.text()) \n  .then(result => console.log(result)) \n  .catch(error => console.log('error', error));",
            "label": "JavaScript"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient().newBuilder() \n  .build(); \nRequest request = new Request.Builder() \n  .url(\"https://api.ouraring.com/v2/usercollection/tag?start_date=2021-11-01&end_date=2021-12-01\") \n  .method(\"GET\", null) \n  .addHeader(\"Authorization\", \"Bearer <token>\") \n  .build(); \nResponse response = client.newCall(request).execute();",
            "label": "Java"
          }
        ]
      }
    },
    "/v2/usercollection/workout": {
      "get": {
        "tags": ["Workouts"],
        "summary": "Get Workouts",
        "description": "Returns available Oura workout data for the specified Oura user within a given timeframe",
        "operationId": "workouts_route_workout_get",
        "parameters": [
          {
            "required": false,
            "schema": {
              "title": "Start Date",
              "type": "string",
              "format": "date",
              "description": "```YYYY-MM-DD``` formatted start date [default: ```end_date``` - 1 day]"
            },
            "name": "start_date",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "title": "End Date",
              "type": "string",
              "format": "date",
              "description": "```YYYY-MM-DD``` formatted end date [default: current UTC date]"
            },
            "name": "end_date",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "title": "Next Token",
              "type": "string",
              "description": "Pagination token"
            },
            "name": "next_token",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WorkoutResponse"
                },
                "examples": {
                  "example": {
                    "summary": "example",
                    "value": {
                      "data": [
                        {
                          "activity": "cycling",
                          "calories": 300,
                          "day": "2021-01-01",
                          "distance": 13500.5,
                          "end_datetime": "2021-01-01T01:00:00.000000+00:00",
                          "intensity": "moderate",
                          "label": null,
                          "source": "manual",
                          "start_datetime": "2021-01-01T01:30:00.000000+00:00"
                        }
                      ],
                      "next_token": null
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Query Parameter Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "example": {
                    "summary": "example",
                    "value": {
                      "detail": "Start time is greater than end time: [start_time: 2021-10-01 01:02:03+00:00; end_date: 2021-01-01 01:02:03+00:00"
                    }
                  }
                }
              }
            }
          },
          "426": {
            "description": "Minimum App Version Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "example": {
                    "summary": "example",
                    "value": {
                      "detail": "The user associated with this token has not updated their mobile app to support this data type."
                    }
                  }
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "label": "cURL",
            "source": "curl --location --request GET 'https://api.ouraring.com/v2/usercollection/workout?start_date=2021-11-01&end_date=2021-12-01' \\\n--header 'Authorization: Bearer <token>'"
          },
          {
            "lang": "Python",
            "source": "import requests \nurl = 'https://api.ouraring.com/v2/usercollection/workout' \nparams={ \n    'start_date': '2021-11-01', \n    'end_date': '2021-12-01' \n}\nheaders = { \n  'Authorization': 'Bearer <token>' \n}\nresponse = requests.request('GET', url, headers=headers, params=params) \nprint(response.text)",
            "label": "Python"
          },
          {
            "lang": "JavaScript",
            "source": "var myHeaders = new Headers(); \nmyHeaders.append('Authorization', 'Bearer <token>'); \nvar requestOptions = { \n  method: 'GET', \n  headers: myHeaders, \nfetch('https://api.ouraring.com/v2/usercollection/workout?start_date=2021-11-01&end_date=2021-12-01', requestOptions) \n  .then(response => response.text()) \n  .then(result => console.log(result)) \n  .catch(error => console.log('error', error));",
            "label": "JavaScript"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient().newBuilder() \n  .build(); \nRequest request = new Request.Builder() \n  .url(\"https://api.ouraring.com/v2/usercollection/workout?start_date=2021-11-01&end_date=2021-12-01\") \n  .method(\"GET\", null) \n  .addHeader(\"Authorization\", \"Bearer <token>\") \n  .build(); \nResponse response = client.newCall(request).execute();",
            "label": "Java"
          }
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "Error": {
        "title": "Error",
        "type": "object",
        "properties": {
          "detail": {
            "title": "Detail",
            "type": "string",
            "description": "Message"
          }
        }
      },
      "ActivityContributors": {
        "title": "ActivityContributors",
        "type": "object",
        "description": "Activity score contributors",
        "properties": {
          "meet_daily_targets": {
            "title": "Meet Daily Targets",
            "type": "integer",
            "description": "Contribution of meeting previous 7-day daily activity targets in range ```[1, 100]```"
          },
          "move_every_hour": {
            "title": "Move Every Hour",
            "type": "integer",
            "description": "Contribution of previous 24-hour inactivity alerts in range ```[1, 100]```"
          },
          "recovery_time": {
            "title": "Recovery Time",
            "type": "integer",
            "description": "Contribution of previous 7-day recovery time in range ```[1, 100]```"
          },
          "stay_active": {
            "title": "Stay Active",
            "type": "integer",
            "description": "Contribution of previous 24-hour activity in range ```[1, 100]```"
          },
          "training_frequency": {
            "title": "Training Frequency",
            "type": "integer",
            "description": "Contribution of previous 7-day exercise frequency in range ```[1, 100]```"
          },
          "training_volume": {
            "title": "Training Volume",
            "type": "integer",
            "description": "Contribution of previous 7-day exercise volume in range ```[1, 100]```"
          }
        }
      },
      "DailyActivityModel": {
        "title": "DailyActivityModel",
        "required": [
          "active_calories",
          "average_met_minutes",
          "contributors",
          "equivalent_walking_distance",
          "high_activity_met_minutes",
          "high_activity_time",
          "inactivity_alerts",
          "low_activity_met_minutes",
          "low_activity_time",
          "medium_activity_met_minutes",
          "medium_activity_time",
          "met",
          "meters_to_target",
          "non_wear_time",
          "resting_time",
          "sedentary_met_minutes",
          "sedentary_time",
          "steps",
          "target_calories",
          "target_meters",
          "total_calories",
          "day",
          "timestamp"
        ],
        "type": "object",
        "properties": {
          "class_5_min": {
            "title": "Class 5 Min",
            "type": "string",
            "description": "5-minute activity classification for the activity period:\n* ```0```\tnon wear\n* ```1``` rest\n* ```2``` inactive\n* ```3``` low activity\n* ```4``` medium activity\n* ```5``` high activity"
          },
          "score": {
            "title": "Score",
            "type": "integer",
            "description": "Activity score in range ```[1, 100]```"
          },
          "active_calories": {
            "title": "Active Calories",
            "type": "integer",
            "description": "Active calories expended (in kilocalories)"
          },
          "average_met_minutes": {
            "title": "Average Met Minutes",
            "type": "number",
            "description": "Average metabolic equivalent (MET) in minutes"
          },
          "contributors": {
            "$ref": "#/components/schemas/ActivityContributors"
          },
          "equivalent_walking_distance": {
            "title": "Equivalent Walking Distance",
            "type": "integer",
            "description": "Equivalent walking distance (in meters) of energy expenditure"
          },
          "high_activity_met_minutes": {
            "title": "High Activity Met Minutes",
            "type": "integer",
            "description": "High activity metabolic equivalent (MET) in minutes"
          },
          "high_activity_time": {
            "title": "High Activity Time",
            "type": "integer",
            "description": "High activity metabolic equivalent (MET) in seconds"
          },
          "inactivity_alerts": {
            "title": "Inactivity Alerts",
            "type": "integer",
            "description": "Number of inactivity alerts received"
          },
          "low_activity_met_minutes": {
            "title": "Low Activity Met Minutes",
            "type": "integer",
            "description": "Low activity metabolic equivalent (MET) in minutes"
          },
          "low_activity_time": {
            "title": "Low Activity Time",
            "type": "integer",
            "description": "Low activity metabolic equivalent (MET) in seconds"
          },
          "medium_activity_met_minutes": {
            "title": "Medium Activity Met Minutes",
            "type": "integer",
            "description": "Medium activity metabolic equivalent (MET) in minutes"
          },
          "medium_activity_time": {
            "title": "Medium Activity Time",
            "type": "integer",
            "description": "Medium activity metabolic equivalent (MET) in seconds"
          },
          "met": {
            "$ref": "#/components/schemas/METSample"
          },
          "meters_to_target": {
            "title": "Meters To Target",
            "type": "integer",
            "description": "Remaining meters to target (from ```target_meters```)"
          },
          "non_wear_time": {
            "title": "Non Wear Time",
            "type": "integer",
            "description": "The time (in seconds) in which the ring was not worn"
          },
          "resting_time": {
            "title": "Resting Time",
            "type": "integer",
            "description": "Resting time (in seconds)"
          },
          "sedentary_met_minutes": {
            "title": "Sedentary Met Minutes",
            "type": "integer",
            "description": "Sedentary metabolic equivalent (MET) in minutes"
          },
          "sedentary_time": {
            "title": "Sedentary Time",
            "type": "integer",
            "description": "Sedentary metabolic equivalent (MET) in seconds"
          },
          "steps": {
            "title": "Steps",
            "type": "integer",
            "description": "Total number of steps taken"
          },
          "target_calories": {
            "title": "Target Calories",
            "type": "integer",
            "description": "Daily activity target (in kilocalories)"
          },
          "target_meters": {
            "title": "Target Meters",
            "type": "integer",
            "description": "Daily activity target (in meters)"
          },
          "total_calories": {
            "title": "Total Calories",
            "type": "integer",
            "description": "Total calories expended (in kilocalories) "
          },
          "day": {
            "title": "Day",
            "type": "string",
            "format": "date",
            "description": "The ```YYYY-MM-DD``` formatted local date indicating when the daily activity occurred"
          },
          "timestamp": {
            "title": "Timestamp",
            "type": "string",
            "format": "datetime",
            "description": "ISO 8601 formatted local timestamp indicating the start datetime of when the daily activity occurred"
          }
        }
      },
      "DailyActivityResponse": {
        "title": "DailyActivityResponse",
        "required": ["data"],
        "type": "object",
        "properties": {
          "data": {
            "title": "Data",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DailyActivityModel"
            }
          },
          "next_token": {
            "title": "Next Token",
            "type": "string",
            "description": "Pagination token"
          }
        }
      },
      "HeartRateModel": {
        "title": "HeartRateModel",
        "required": ["bpm", "source", "timestamp"],
        "type": "object",
        "properties": {
          "bpm": {
            "title": "Bpm",
            "type": "integer",
            "description": "Beats per minute"
          },
          "source": {
            "$ref": "#/components/schemas/HeartRateSource"
          },
          "timestamp": {
            "title": "Timestamp",
            "type": "string",
            "format": "datetime",
            "description": "ISO 8601 formatted local timestamp indicating when the heart rate data was collected"
          }
        }
      },
      "HeartRateResponse": {
        "title": "HeartRateResponse",
        "required": ["data"],
        "type": "object",
        "properties": {
          "data": {
            "title": "Data",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/HeartRateModel"
            },
            "description": "Heart Rate Model"
          },
          "next_token": {
            "title": "Next Token",
            "type": "string",
            "description": "Pagination token"
          }
        }
      },
      "HeartRateSource": {
        "title": "HeartRateSource",
        "type": "string",
        "description": "The supported heart rate types:\n* ```awake```\n* ```rest```\n* ```sleep```\n* ```session```\n* ```live```"
      },
      "SessionModel": {
        "title": "SessionModel",
        "required": ["day", "start_datetime", "end_datetime", "type"],
        "type": "object",
        "properties": {
          "day": {
            "title": "Day",
            "type": "string",
            "format": "date",
            "description": "The date when the session occurred"
          },
          "start_datetime": {
            "title": "Start Datetime",
            "type": "string",
            "format": "datetime",
            "description": "The start datetime when the session occurred"
          },
          "end_datetime": {
            "title": "End Datetime",
            "type": "string",
            "format": "datetime",
            "description": "The end datetime when the session occurred"
          },
          "type": {
            "$ref": "#/components/schemas/SessionType"
          },
          "heart_rate": {
            "$ref": "#/components/schemas/HRTSample"
          },
          "heart_rate_variability": {
            "$ref": "#/components/schemas/HRVSample"
          },
          "mood": {
            "$ref": "#/components/schemas/SessionMood"
          },
          "motion_count": {
            "$ref": "#/components/schemas/Sample"
          }
        }
      },
      "SessionMood": {
        "title": "SessionMood",
        "type": "string",
        "description": "The user's selected mood after the session:\n* ```bad```\n* ```worse```\n* ```same```\n* ```good```\n* ```great```"
      },
      "SessionResponse": {
        "title": "SessionResponse",
        "required": ["data"],
        "type": "object",
        "properties": {
          "data": {
            "title": "Data",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SessionModel"
            }
          },
          "next_token": {
            "title": "Next Token",
            "type": "string",
            "description": "Pagination token"
          }
        }
      },
      "SessionType": {
        "title": "SessionType",
        "type": "string",
        "description": "The session type:\n* ```breathing```\n* ```meditation```\n* ```nap```\n* ```relaxation```\n* ```rest```\n* ```body_status```"
      },
      "Sample": {
        "title": "Sample",
        "required": ["interval", "items", "timestamp"],
        "type": "object",
        "description": "Timeseries data represented by an array of numbers",
        "properties": {
          "interval": {
            "title": "Interval",
            "type": "number",
            "description": "The number of seconds between records"
          },
          "items": {
            "title": "Items",
            "type": "array",
            "items": {
              "type": "number"
            },
            "description": "The recorded values"
          },
          "timestamp": {
            "title": "Timestamp",
            "type": "string",
            "format": "LocalizedDateTime",
            "description": "ISO 8601 formatted local timestamp indicating the start datetime of when the data was collected"
          }
        }
      },
      "HRVSample": {
        "title": "Sample",
        "required": ["interval", "items", "timestamp"],
        "type": "object",
        "description": "Timeseries data represented by an array of numbers; this data is available for sessions longer than 3 minutes",
        "properties": {
          "interval": {
            "title": "Interval",
            "type": "number",
            "description": "The number of seconds between records"
          },
          "items": {
            "title": "Items",
            "type": "array",
            "items": {
              "type": "number"
            },
            "description": "The recorded values"
          },
          "timestamp": {
            "title": "Timestamp",
            "type": "string",
            "format": "LocalizedDateTime",
            "description": "ISO 8601 formatted local timestamp indicating the start datetime of when the data was collected"
          }
        }
      },
      "HRTSample": {
        "title": "Sample",
        "required": ["interval", "items", "timestamp"],
        "type": "object",
        "description": "Timeseries data represented by an array of numbers; this data is available for sessions longer than 5 minutes",
        "properties": {
          "interval": {
            "title": "Interval",
            "type": "number",
            "description": "The number of seconds between records"
          },
          "items": {
            "title": "Items",
            "type": "array",
            "items": {
              "type": "number"
            },
            "description": "The recorded values"
          },
          "timestamp": {
            "title": "Timestamp",
            "type": "string",
            "format": "LocalizedDateTime",
            "description": "ISO 8601 formatted local timestamp indicating the start datetime of when the data was collected"
          }
        }
      },
      "METSample": {
        "title": "Sample",
        "required": ["interval", "items", "timestamp"],
        "type": "object",
        "description": "Metabolic equivalent (MET) timeseries data represented by an array of numbers",
        "properties": {
          "interval": {
            "title": "Interval",
            "type": "number",
            "description": "The number of seconds between records"
          },
          "items": {
            "title": "Items",
            "type": "array",
            "items": {
              "type": "number"
            },
            "description": "The recorded values"
          },
          "timestamp": {
            "title": "Timestamp",
            "type": "string",
            "format": "LocalizedDateTime",
            "description": "ISO 8601 formatted local timestamp indicating the start datetime of when the data was collected"
          }
        }
      },
      "TagModel": {
        "title": "TagModel",
        "required": ["day", "timestamp", "tags"],
        "type": "object",
        "properties": {
          "day": {
            "title": "Day",
            "type": "string",
            "format": "date",
            "description": "The ```YYYY-MM-DD``` formatted local date indicating when the tag was collected"
          },
          "text": {
            "title": "Text",
            "type": "string",
            "description": "Custom annotations associated with the tag, as provided by the user"
          },
          "timestamp": {
            "title": "Timestamp",
            "type": "string",
            "format": "datetime",
            "description": "ISO 8601 formatted local timestamp indicating when the tag was collected"
          },
          "tags": {
            "title": "Tags",
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "A list of tags selected by the user. A translation of tag values can be found [here](https://cloud.ouraring.com/edu/tag-translations)."
          }
        }
      },
      "TagResponse": {
        "title": "TagResponse",
        "required": ["data"],
        "type": "object",
        "properties": {
          "data": {
            "title": "Data",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TagModel"
            }
          },
          "next_token": {
            "title": "Next Token",
            "type": "string",
            "description": "Pagination token"
          }
        }
      },
      "PersonalInfoResponse": {
        "title": "PersonalInfoResponse",
        "required": [],
        "type": "object",
        "properties": {
          "age": {
            "title": "Age",
            "type": "integer",
            "description": "The user's age. This field is only present if the user consented to the personal access scope. Otherwise, this field will be ```null```."
          },
          "weight": {
            "title": "Weight",
            "type": "number",
            "description": "The user's weight (in kilograms). This field is only present if the user consented to the personal access scope. Otherwise, this field will be ```null```."
          },
          "height": {
            "title": "Height",
            "type": "number",
            "description": "The user's height (in meters). This field is only present if the user consented to the personal access scope. Otherwise, this field will be ```null```."
          },
          "biological_sex": {
            "title": "Biological Sex",
            "type": "string",
            "description": "The user's biological sex. This field is only present if the user consented to the personal access scope. Otherwise, this field will be ```null```."
          },
          "email": {
            "title": "Email",
            "type": "string",
            "description": "The user's e-mail. This field is only present if the user consented to the email access scope. Otherwise, this field will be ```null```."
          }
        }
      },
      "WorkoutIntensity": {
        "title": "WorkoutIntensity",
        "type": "string",
        "description": "The workout intensity:\n* ```easy```\n* ```moderate```\n* ```hard```"
      },
      "WorkoutModel": {
        "title": "WorkoutModel",
        "required": [
          "activity",
          "day",
          "end_datetime",
          "intensity",
          "source",
          "start_datetime"
        ],
        "type": "object",
        "properties": {
          "activity": {
            "title": "Activity",
            "type": "string",
            "description": "The workout activity type"
          },
          "calories": {
            "title": "Calories",
            "type": "number",
            "description": "The number of calories (kcal) burned during the workout"
          },
          "day": {
            "title": "Day",
            "type": "string",
            "format": "date",
            "description": "The ```YYYY-MM-DD``` formatted local date indicating when the workout was recorded"
          },
          "distance": {
            "title": "Distance",
            "type": "number",
            "description": "The distance (measured in meters) traveled during the workout"
          },
          "end_datetime": {
            "title": "End Datetime",
            "type": "string",
            "format": "datetime",
            "description": "ISO 8601 formatted local timestamp indicating when the workout ended"
          },
          "intensity": {
            "$ref": "#/components/schemas/WorkoutIntensity"
          },
          "label": {
            "title": "Label",
            "type": "string",
            "description": "User-defined label for the workout"
          },
          "source": {
            "$ref": "#/components/schemas/WorkoutSource"
          },
          "start_datetime": {
            "title": "Start Datetime",
            "type": "string",
            "format": "datetime",
            "description": "ISO 8601 formatted local timestamp indicating when the workout started"
          }
        }
      },
      "WorkoutResponse": {
        "title": "WorkoutResponse",
        "required": ["data"],
        "type": "object",
        "properties": {
          "data": {
            "title": "Data",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/WorkoutModel"
            }
          },
          "next_token": {
            "title": "Next Token",
            "type": "string",
            "description": "Pagination token"
          }
        }
      },
      "WorkoutSource": {
        "title": "WorkoutSource",
        "type": "string",
        "description": "The data source where the Workout data was collected from:\n* ```manual``` Workouts which were manually entered by the user\n* ```autodetected``` Workouts autodetected by Oura\n* ```confirmed``` Workouts autodetected by Oura and confirmed by the user"
      }
    }
  },
  "tags": [
    {
      "name": "Daily Activity",
      "description": "The Daily Activity scope includes daily activity summary values and detailed activity levels. Activity levels are expressed in [metabolic equivalent of task minutes](https://en.wikipedia.org/wiki/Metabolic_equivalent) (MET mins). Oura tracks activity based on the movement."
    },
    {
      "name": "Heart Rate",
      "description": "The Heart Rate data scope includes time-series heart rate data throughout the day and night. Heart rate is provided at 5-minute increments. For heart rate data recorded from a Session, see Sessions endpoint.",
      "externalDocs": {
        "description": "How accurate is the heart rate data generated by the Oura Ring?",
        "url": "https://ouraring.com/blog/how-accurate-is-oura/"
      }
    },
    {
      "name": "Personal Info",
      "description": "The Personal Info scope includes personal information (e.g. age, email, weight, and height) about the user."
    },
    {
      "name": "Sessions",
      "description": "The Sessions data scope provides information on how users engage with guided and unguided sessions in the Oura app, including the user’s biometric trends during the sessions.",
      "externalDocs": {
        "description": "Learn about the available session types within the Explore Tab",
        "url": "https://ouraring.com/blog/oura-explore-tab/"
      }
    },
    {
      "name": "Tags",
      "description": "The Tags data scope includes tags that Oura users enter within the Oura mobile app. Tags are a growing list of activities, environment factors, symptoms, emotions, and other aspects that provide broader context into what’s happening with users beyond the objective data generated by the Oura Ring.\n\n[More information on tag translations](https://cloud.ouraring.com/edu/tag-translations)",
      "externalDocs": {
        "description": "More information about tags",
        "url": "https://ouraring.com/blog/tags/"
      }
    },
    {
      "name": "Workouts",
      "description": "The Workout data scope includes information about user workouts. This is a diverse, growing list of workouts that help inform how the user is training and exercising."
    },
    {
      "name": "Daily Sleep",
      "description": "Sleep period is a nearly continuous, longish period of time spent lying down in bed. Sleep is currently available in the V1 API. We plan to release sleep with the V2 API in the near future. [Click here for V1 API documentation](/docs/sleep)."
    },
    {
      "name": "Daily Readiness",
      "description": "Readiness tells how ready you are for the day. Readiness is currently available in the V1 API. We plan to release readiness through the V2 API in the near future. [Click here for V1 API documentation](/docs/readiness)."
    }
  ]
}
